: first stage boot
set cpu 11/40
set tm0 locked
attach tm0 dist.tap
: the "attach" commands will build the local files to back the rk disks
attach rk0 rk0
attach rk1 rk1
attach rk2 rk2
: "toggle in" minimal tape bootloader
: this bootloader will set the device registers to
: copy the first data from the tape unit into memory
: at address 0
: after the device is kicked off, the booloader
: just loops at address 100012 due to the
: instruction there which is effectively "br PC-2"
d cpu 100000 012700
d cpu 100002 172526
d cpu 100004 010040
d cpu 100006 012740
d cpu 100010 060003
d cpu 100012 000777
: when this code runs, it needs to loop for "a while"
: to give the tape unit time to start, copy the data, etc
: normally we would start this, wait a few seconds and then
: break the simulation with ^E
: but since we want to continue in the script, we set a
: breakpoint at the place where we will be looping, but let it
: loop at least 10000 times, which seems to be enough
: on a real PDP-11/40, you would watch the tape drive, and only
: after you saw the tape move, then stop, would you halt the CPU
: from the front panel and proceed
:
: set the breakpoint for the first step
break 100012[10000]
: and then start the CPU
g 100000
: when the breakpoint hits...
: set up the expects
expect '=' send 'tmrk\r' ; continue
expect 'disk offset' send '0\r' ; continue
expect 'tape offset' send '100\r' ; continue
expect 'count' send '1\r' ; continue
: 
expect '=' send 'tmrk\r' ; continue
expect 'disk offset' send '1\r' ; continue
expect 'tape offset' send '101\r' ; continue

expect 'count' send '3999\r' ; continue
echo ************* when you see the = prompt hit ^E then q
: need to get out of the = here somehow
: now do the actual start
g 0
